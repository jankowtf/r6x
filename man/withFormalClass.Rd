% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/withFormalClass.r
\name{withFormalClass}
\alias{withFormalClass}
\title{Define R6 class and buffer formal S4 equivalent}
\usage{
withFormalClass(def, envir = parent.frame(), auto_assign = FALSE,
  r6 = TRUE)
}
\arguments{
\item{def}{Actual R6 class definition, i.e. a call to \code{\link[R6]{R6Class}}.}

\item{envir}{\code{\link{environment}}.
Parent environment for the assignment of the class generator object.
Only relevant if \code{auto_assign = TRUE}.}

\item{auto_assign}{\code{\link{logical}}.
\code{TRUE}: assign class generator object to an object whose name
corresponds to the class name in \code{envir};
\code{FALSE}: you must make sure that you assign the output of the function
to the desired name.}

\item{r6}{\code{\link{logical}}.
\code{TRUE}: include  \code{"R6"} in the S3 class graph in order to
  denote that any R6 class inherits from class \code{R6};
\code{FALSE}: only buffer the actual class name.
Setting this to \code{TRUE} makes sense when you plan on defining
S4 methods that should work for \emph{any} R6 method (as opposed to
methods for \emph{specific} R6 classes only).}
}
\value{
Return value of \code{\link[R6]{R6Class}}.
}
\description{
Takes a regular R6 class definition and does the following things with it:
\enumerate{
 \item{Evaluate the class definition (main effect)}
 \item{Extract and store S3 class graph (i.e. including inheritance structure) in
   a special \code{\link[base]{options}} environment. This information can in
   turn be processed by \code{\link[r6x]{formalizeClasses}} inside your
   package's call to \code{\link[base]{.onLoad}} in order to produce S4
   equivalents of your R6 classes}
}
}
\examples{
##------------------------------------------------------------------------------
## Class without inheritance
##------------------------------------------------------------------------------

## Ensure clean initial state //
if (exists("Test")) {
  rm("Test")
}
exists("Test")
getOption(".classes")

## Define R6 class //
Test <- withFormalClass(
  R6Class(
    classname = "Test",
    portable = TRUE,
    public = list(
      foo = function() "hello world!"
    )
  )
)

## Investigate state after definition //
exists("Test")
Test
ls(getOption(".classes"))
getOption(".classes")$Test
## --> buffered S3 class information that is later used by `formalizeClasses()`

## Auto-assign //
rm(Test)
withFormalClass(
  R6Class(
    classname = "Test",
    portable = TRUE,
    public = list(
      foo = function() "hello world!"
    )
  ),
  auto_assign = TRUE
)
## --> note that the class generator object is automaticall assigned to `Test`
exists("Test")
Test

##------------------------------------------------------------------------------
## Class with inheritance
##------------------------------------------------------------------------------

Test2 <- withFormalClass(
  R6Class(
    classname = "Test2",
    portable = TRUE,
    inherit = r6x::Test,
    public = list(
      bar = function() "hello world!"
    )
  )
)

## Inspect buffered S3 class information //
ls(getOption(".classes"))
getOption(".classes")$Test2
## --> S3 inheritance graph
}
\author{
Janko Thyson \email{janko.thyson@gmail.com}
}
\references{
\url{http://github.com/rappster/r6x}
}
\seealso{
\code{\link[r6x]{formalizeClasses}}
}

