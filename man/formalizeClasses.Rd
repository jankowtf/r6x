% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/formalizeClasses.r
\name{formalizeClasses}
\alias{formalizeClasses}
\title{Create formal S4 equivalents of R6 classes}
\usage{
formalizeClasses(where = eval(substitute(as.environment(NAME), list(NAME =
  sprintf("package:\%s", as.list(read.dcf("DESCRIPTION")[1, ])[["Package"]])))),
  overwrite = TRUE, clean_up = TRUE)
}
\arguments{
\item{where}{\code{\link{environment}} or \code{\link{NULL}}.
Environment in which tne S4 equivalents should be defined. If it exists,
this defaults to your packagte's namespace environment. If that does not
exist, it is set to \code{\link[base]{.GlobalEnv}}.}

\item{overwrite}{\code{\link{logical}}.
\code{TRUE}: ensure previously assigned S4 equivalents are removed from
  \code{where} before subsequent calls to
  \code{\link[methods]{setOldClass}};
\code{FALSE}: state of classes in \code{where} is not modified before
  subsequent calls to \code{\link[methods]{setOldClass}}. See section
  \emph{Recommendation}.}

\item{clean_up}{\code{\link{logical}}.
\code{TRUE}: remove buffered S3 class information in options;
\code{FALSE}: keep buffered S3 class information in options.}
}
\value{
Return value of \code{\link[R6]{R6Class}}.
}
\description{
Takes the S3 class information buffered in \code{getOption(".classes")} and
uses it accordingly for calls to \code{\link[methods]{setOldClass}}.
}
\details{
The S4 equivalents are assigned to the package's namespace if it is available
(i.e. \code{as.environment("package:<package-name>")}). This is definitely
the case at the stage when \code{\link[base]{.onLoad}} is calles, hence the
call to this function should happen there.
}
\section{Recommendation}{

It seems to be a good advice to set \code{overwrite = TRUE} as this ensures
that previously defined S4 equivalents are removed prior to the respective
calls to \code{\link[methods]{setOldClass}}. Not doing so seems to have the
undesired side effect that
\code{getClasses(where = as.environment("package:<package-name>"))} returns
\code{character()} for subsequent package loads via
\code{\link[devtools]{load_all}} (and thus subsequent calls of
\code{\link[base]{.onLoad}}).
}
\examples{
##------------------------------------------------------------------------------
## Stand-alone call
##------------------------------------------------------------------------------

##########
## NOTE ##
##########

## This example only serves the purpose of illustrating what's going on.
## In order for this function to be actually useful when developing own
## packages, it should be called inside `.onLoad()` (see example below)

## Preliminaries //
## Run example of `?withFormalClass`

## Buffered S3 class information //
clss <- getOption(".classes")
ls(clss)
lapply(ls(clss), function(ii) clss[[ii]])

## Note //
## Currently, there are no formal S4 equivalents for our R6 classes yet:
isClass("Test")
isClass("Test2")
try(getClass("Test"))
try(getClass("Test2"))

## Formalize classes //
formalizeClasses()

## Note //
## 1) Formal S4 equivalents have been created:
isClass("Test")
isClass("Test2")
try(getClass("Test"))
try(getClass("Test2"))
## --> note how the S3 inheritance information has been preserved

## 2) The buffered information has been deleted due to `clean_up = TRUE`:
getOption(".classes")

##------------------------------------------------------------------------------
## Call inside of `.onLoad()`
##------------------------------------------------------------------------------

##########
## NOTE ##
##########

## This function should be called in `.onLoad()` as at this stage the package
## has already been attached and thus a namespace environment has been created.
## This environment is the recommended value for the function's `envir`
## argument (automatically set, you don't need to provide it explicitly)

## So this is a template of how your `.onLoad()` function should look like
## when using this function. Just copy it to a file inside your `R` directory
## so it is picked up by `devtools::load_all()` or the like:

.onAttach <- function(libname, pkgname) {
  formalizeClasses()
}



}
\author{
Janko Thyson \email{janko.thyson@gmail.com}
}
\references{
\url{http://github.com/rappster/r6x}
}
\seealso{
\code{\link[r6x]{withFormalClass}}
}

