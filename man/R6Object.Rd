% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/classes.r
\docType{class}
\name{R6Object}
\alias{R6Object}
\title{Class: R6Object}
\format{An \code{\link{R6Class}} generator object}
\usage{
R6Object
}
\description{
Base layer class for inheritance providing a number of methods that
are often required in the context of using R6 classes.
}
\section{Methods}{

\describe{
 \item{\code{.getComponentNames()}: } {
   List the names of all components (regardless if field or method)
 }
 \item{\code{.getComponentClasses()}: } {
   List the classes of all components (regardless if field or method)
 }
 \item{\code{.getFieldNames()}} {
   Returns the names of all fields that are not functions (i.e. methods)
 }
 \item{\code{.getMethodNames()}} {
   Returns the names of all methods
 }
 \item{\code{.getField(name, check, strict)}} {
   Internal getter method with validation (field name) with different
   strictness levels (argument \code{strict}).
 }
 \item{\code{.setField(name, value, check, strict)}} {
   Internal getter method with validation (field name and value class)
   with different strictness levels (argument \code{strict}).
 }
 \item{\code{.message(msg, id)}} {
   Signals the information in \code{msg} as a \code{\link[base]{message}}.
   Argument \code{id} can be used to include more precise information
   in the message prefix
 }
 \item{\code{.warning(msg, id)}} {
   Signals the information in \code{msg} as a \code{\link[base]{warning}}.
   Argument \code{id} can be used to include more precise information
   in the message prefix
 }
 \item{\code{.error(msg, id)}} {
   Signals the information in \code{msg} as an error as produced by
   \code{\link[base]{stop}}.
   Argument \code{id} can be used to include more precise information
   in the message prefix
 }
}
}
\examples{
## Define example class that inherits from `R6Object` //
require(R6)
Test <- R6Class(
  classname = "Test",
  inherit = R6Object,
  public = list(
    field_1 = letters,
    field_2 = TRUE,
    field_3 = list(a = 1, b = 2),
    field_4 = data.frame(a = 1:3, b = 1:3),
    field_5 = 1.5,
    field_6 = as.integer(1),
    field_7 = NULL,
    field_8 = NA,
    foo = function() {
      super$.message("My message", id = "foo")
      "hello"
    },
    bar = function() {
      super$.warning("My warning", id = "bar")
      "world!"
    }
  )
)

## Instantiate //
inst <- Test$new()

## Inherited methods //
inst$.getComponentNames()
inst$.getComponentClasses()

inst$.getFieldNames()
inst$.getMethodNames()

inst$.message("Hello world!")
inst$.message("Hello world!", id = "abc")
inst$.warning("Hello world!")
inst$.warning("Hello world!", id = "abc")
inst$.error("Hello world!")
inst$.error("Hello world!", id = "abc")

inst$.getField("field_1")
inst$.getField("field_xyz")
inst$.getField("field_xyz", strict = 1)
inst$.getField("field_xyz", strict = 2)
inst$.getField("field_xyz", strict = 3)

inst$.setField("field_1", value = NA, strict = 3)
inst$.setField("field_1", value = NA, strict = 2)
## --> setting NOT blocked, so it went through with a warning:
inst$.getField("field_1")
inst$.setField("field_1", value = letters, strict = 1)
}
\keyword{datasets}

